// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fight.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Fight {

  /// <summary>Holder for reflection information generated from fight.proto</summary>
  public static partial class FightReflection {

    #region Descriptor
    /// <summary>File descriptor for fight.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FightReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtmaWdodC5wcm90bxIFZmlnaHQaEWJhc2Uvd3NiYXNlLnByb3RvIsMECglN",
            "ZXNzYWdlSWQitQQKBEVudW0SCAoETm9uZRAAEg0KCFJlZ2lzdGVyENAPEhEK",
            "DFJlZ2lzdGVyUmVzcBDRDxIOCglIZWFydGJlYXQQ0g8SDQoIUmVhZHlSZXEQ",
            "0w8SDgoJUmVhZHlSZXNwENQPEhYKEU90aGVySm9pblRlYW1QdXNoENUPEhIK",
            "DUdhbWVTdGFydFB1c2gQ1g8SEwoOQ2FuY2VsUmVhZHlSZXEQ1w8SFAoPQ2Fu",
            "Y2VsUmVhZHlSZXNwENgPEgkKBE1vdmUQ2Q8SDAoHUHJvcFJlcRDaDxINCghQ",
            "cm9wUmVzcBDbDxINCghQcm9wUHVzaBDcDxIQCgtIaXRQcm9wUHVzaBDdDxIQ",
            "CgtHYW1lRW5kUHVzaBDeDxIXChJVc2VySW5mb1VwZGF0ZVB1c2gQ3w8SEAoL",
            "VXNlckluZm9SZXEQ4A8SEQoMVXNlckluZm9SZXNwEOEPEhIKDVNlcnZlcklu",
            "Zm9SZXEQ4g8SEwoOU2VydmVySW5mb1Jlc3AQ4w8SEQoMRmlnaHRMaXN0UmVx",
            "EOQPEhIKDUZpZ2h0TGlzdFJlc3AQ5Q8SEgoNU2NlbmVJbml0UHVzaBDmDxIP",
            "CgpXaW5SYXRlUmVxEOcPEhAKC1dpblJhdGVSZXNwEOgPEg8KCkhpdE9ic1B1",
            "c2gQ6Q8SDwoKSGl0Qm94UHVzaBDqDxIUCg9LaWNrT2ZmbGluZVB1c2gQ6w8S",
            "EAoLR2FtZUluZm9SZXEQ7A8SEQoMR2FtZUluZm9SZXNwEO0PIq0BCgdTY2Vu",
            "ZUlkIqEBCgRFbnVtEggKBE5vbmUQABIPCgtQYXJsb3JTY2VuZRABEgwKCERv",
            "Z1NjZW5lEAISEAoMU2hlbHRlclNjZW5lEAMSEwoPVHJlYXN1cmVEaWdnaW5n",
            "EAQSCwoHQmVkcm9vbRAFEhAKDFJhaW5ib3dCZWFjaBAGEg8KC1N0ZXJpb3Vz",
            "U2VhEAcSDQoJU3RhcnJ5U2t5EAgSCgoGUmFjaW5nEAkiUAoLUmVnaXN0ZXJS",
            "ZXESDQoFdG9rZW4YASABKAkSEAoIc2NlbmVfaWQYAiABKA0SDwoHYWRkcmVz",
            "cxgDIAEoCRIPCgd1c2VyX2lkGAQgASgEIkYKDFJlZ2lzdGVyUmVzcBIPCgd1",
            "c2VyX2lkGAEgASgEEhMKC3N0YXR1c19jb2RlGAIgASgNEhAKCGJrX2NvdW50",
            "GAMgASgNIi4KCFJlYWR5UmVxEg8KB3VzZXJfaWQYASABKAQSEQoJcm9sZV90",
            "eXBlGAIgASgNIiAKCVJlYWR5UmVzcBITCgtzdGF0dXNfY29kZRgBIAEoDSIm",
            "CgNQb3MSCQoBeBgBIAEoBRIJCgF5GAIgASgFEgkKAXoYAyABKAUieAoETW92",
            "ZRIXCgNwb3MYASABKAsyCi5maWdodC5Qb3MSFwoDZGlyGAIgASgLMgouZmln",
            "aHQuUG9zEg0KBWluZGV4GAMgASgNEg0KBXN0YXRlGAQgASgFEg8KB2NvbnRy",
            "b2wYBSABKAUSDwoHdXNlcl9pZBgGIAEoBCKFBQoIVXNlckluZm8SDwoHdXNl",
            "cl9pZBgBIAEoBBIPCgdyb29tX2lkGAIgASgNEg0KBXN0YXRlGAMgASgNEhEK",
            "CXVzZXJfbmFtZRgEIAEoCRIPCgdwaWNfdXJsGAUgASgJEg4KBmdlbmRlchgG",
            "IAEoCRIMCgRjb2RlGAcgASgJEgsKA2FnZRgIIAEoCRIQCghjb25zdGVsbBgJ",
            "IAEoCRISCgphdmF0YXJfaWRzGAogAygDEg0KBW1vZGVsGAsgASgNEg0KBXN0",
            "YXJ0GAwgASgNEhwKB2N1cl9wb3MYDSABKAsyCy5maWdodC5Nb3ZlEhUKDW5l",
            "dHdvcmtfc3RhdGUYDiABKA0SEQoJaGVhcnRiZWF0GA8gASgNEhAKCHNjZW5l",
            "X2lkGBAgASgNEhEKCXNlcnZlcl9pZBgRIAEoDRINCgVzcGVlZBgSIAEoBRIR",
            "Cglyb2xlX3R5cGUYEyABKA0SDwoHYWRkcmVzcxgUIAEoCRISCgpsYXN0X2xv",
            "Z2luGBUgASgNEgsKA09icxgWIAEoBRIOCgZGcmVlemUYFyABKAUSDgoGU2hp",
            "ZWxkGBggASgFEhUKDUxhc3RVc2VGcmVlemUYGSABKAMSFQoNTGFzdFVzZVNo",
            "aWVsZBgaIAEoAxIRCglUaW1lc3RhbXAYGyABKAMSDQoFaXNPYnMYHCABKAgS",
            "EAoIaXNGcmVlemUYHSABKAgSEAoIaXNTaGllbGQYHiABKAgSEgoKZnJlZXpl",
            "SXNDRBgfIAEoCBISCgpzaGllbGRJc0NEGCAgASgIEhsKB29ic19wb3MYISAB",
            "KAsyCi5maWdodC5Qb3MSGwoHYm94X3BvcxgiIAEoCzIKLmZpZ2h0LlBvcyIy",
            "ChFPdGhlckpvaW5UZWFtUHVzaBIdCgRpbmZvGAEgASgLMg8uZmlnaHQuVXNl",
            "ckluZm8iUgoNR2FtZVN0YXJ0UHVzaBIPCgdnYW1lX2lkGAEgASgEEh4KBWlu",
            "Zm9zGAIgAygLMg8uZmlnaHQuVXNlckluZm8SEAoIZ2FtZV9sZW4YAyABKAUi",
            "IQoOQ2FuY2VsUmVhZHlSZXESDwoHdXNlcl9pZBgBIAEoBCImCg9DYW5jZWxS",
            "ZWFkeVJlc3ASEwoLc3RhdHVzX2NvZGUYASABKA0iMwoSVXNlckluZm9VcGRh",
            "dGVQdXNoEh0KBGluZm8YASABKAsyDy5maWdodC5Vc2VySW5mbyIeCgtHYW1l",
            "SW5mb1JlcRIPCgd1c2VyX2lkGAEgASgEIl4KDEdhbWVJbmZvUmVzcBIPCgd1",
            "c2VyX2lkGAEgASgEEg0KBXN0YXRlGAIgASgNEg8KB2dhbWVfaWQYAyABKA0S",
            "HQoEaW5mbxgEIAMoCzIPLmZpZ2h0LlVzZXJJbmZvIisKB1Byb3BSZXESDwoH",
            "dXNlcl9pZBgBIAEoBBIPCgdwcm9wX2lkGAIgASgNIkIKCFByb3BSZXNwEhMK",
            "C3N0YXR1c19jb2RlGAEgASgNEg8KB3Byb3BfaWQYAiABKA0SEAoIYmtfY291",
            "bnQYAyABKA0iLAoIUHJvcFB1c2gSDwoHdXNlcl9pZBgBIAEoBBIPCgdwcm9w",
            "X2lkGAIgASgNIi8KC0hpdFByb3BQdXNoEg8KB3VzZXJfaWQYASABKAQSDwoH",
            "cHJvcF9pZBgCIAEoDSJpCgpIaXRPYnNQdXNoEg8KB3VzZXJfaWQYASABKAQS",
            "DgoGb2JzX2lkGAIgASgEEh0KBGluZm8YAyABKAsyDy5maWdodC5Vc2VySW5m",
            "bxIbCgdvYnNfcG9zGAQgASgLMgouZmlnaHQuUG9zImkKCkhpdEJveFB1c2gS",
            "DwoHdXNlcl9pZBgBIAEoBBIOCgZib3hfaWQYAiABKAQSHQoEaW5mbxgDIAEo",
            "CzIPLmZpZ2h0LlVzZXJJbmZvEhsKB2JveF9wb3MYBCABKAsyCi5maWdodC5Q",
            "b3MidwoLR2FtZUVuZFB1c2gSDwoHZ2FtZV9pZBgBIAEoBBIOCgZpc193aW4Y",
            "AiABKAgSFQoNcmVhd2FyZF9jb3VudBgDIAEoDRIQCghia19jb3VudBgEIAEo",
            "DRIeCgVpbmZvcxgFIAEoCzIPLmZpZ2h0LlVzZXJJbmZvIg8KDVNlcnZlcklu",
            "Zm9SZXEiMAoOU2VydmVySW5mb1Jlc3ASEgoKdXNlcl9jb3VudBgBIAEoDRIK",
            "CgJpcBgCIAEoCSLAAgoJRmlnaHREYXRhEgoKAmlkGAEgASgEEhEKCXBvbGlj",
            "ZV9pZBgCIAEoBBITCgtwb2xpY2VfbmFtZRgDIAEoCRITCgtwb2xpY2VfaGVh",
            "ZBgEIAEoCRITCgtjcmltaW5hbF9pZBgFIAEoBBIVCg1jcmltaW5hbF9uYW1l",
            "GAYgASgJEhUKDWNyaW1pbmFsX2hlYWQYByABKAkSEAoIc2NlbmVfaWQYCCAB",
            "KA0SDwoHcm9vbV9pZBgJIAEoDRIRCglyZXdhcmRfaWQYCiABKA0SFAoMcmV3",
            "YXJkX2NvdW50GAsgASgNEhQKDGZpZ2h0X3Jlc3VsdBgMIAEoDRINCgVyb2Jv",
            "dBgNIAEoDRIOCgZyZW1hcmsYDiABKAkSEgoKY3JlYXRlZF9hdBgPIAEoAxIS",
            "Cgp1cGRhdGVkX2F0GBAgASgDIhoKDEZpZ2h0SW5mb1JlcRIKCgJpZBgBIAEo",
            "BCIvCg1GaWdodEluZm9SZXNwEh4KBGRhdGEYASABKAsyEC5maWdodC5GaWdo",
            "dERhdGEiUgoMRmlnaHRMaXN0UmVxEg8KB3VzZXJfaWQYASABKAQSDAoEcGFn",
            "ZRgCIAEoDRIRCglwYWdlX3NpemUYAyABKA0SEAoIb3JkZXJfYnkYBCABKAki",
            "LwoNRmlnaHRMaXN0UmVzcBIeCgRsaXN0GAEgAygLMhAuZmlnaHQuRmlnaHRE",
            "YXRhIjAKCU9ic0FuZEJveBIKCgJpZBgBIAEoBBIXCgNwb3MYAiABKAsyCi5m",
            "aWdodC5Qb3MibwoNU2NlbmVJbml0UHVzaBIeCgRvYnNzGAEgAygLMhAuZmln",
            "aHQuT2JzQW5kQm94Eh4KBGJveHMYAiADKAsyEC5maWdodC5PYnNBbmRCb3gS",
            "HgoFaW5mb3MYAyADKAsyDy5maWdodC5Vc2VySW5mbyIMCgpXaW5SYXRlUmVx",
            "Ii8KC1dpblJhdGVSZXNwEg4KBnBvbGljZRgBIAEoAxIQCghjcmltaW5hbBgC",
            "IAEoAyIiCg9LaWNrT2ZmbGluZVB1c2gSDwoHdXNlcl9pZBgBIAEoBCIeCgtV",
            "c2VySW5mb1JlcRIPCgd1c2VyX2lkGAEgASgEIi0KDFVzZXJJbmZvUmVzcBId",
            "CgRpbmZvGAQgASgLMg8uZmlnaHQuVXNlckluZm9CEloQZ2FtZS93c2FwaS9m",
            "aWdodGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Base.WsbaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.MessageId), global::Fight.MessageId.Parser, null, null, new[]{ typeof(global::Fight.MessageId.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.SceneId), global::Fight.SceneId.Parser, null, null, new[]{ typeof(global::Fight.SceneId.Types.Enum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.RegisterReq), global::Fight.RegisterReq.Parser, new[]{ "Token", "SceneId", "Address", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.RegisterResp), global::Fight.RegisterResp.Parser, new[]{ "UserId", "StatusCode", "BkCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.ReadyReq), global::Fight.ReadyReq.Parser, new[]{ "UserId", "RoleType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.ReadyResp), global::Fight.ReadyResp.Parser, new[]{ "StatusCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.Pos), global::Fight.Pos.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.Move), global::Fight.Move.Parser, new[]{ "Pos", "Dir", "Index", "State", "Control", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.UserInfo), global::Fight.UserInfo.Parser, new[]{ "UserId", "RoomId", "State", "UserName", "PicUrl", "Gender", "Code", "Age", "Constell", "AvatarIds", "Model", "Start", "CurPos", "NetworkState", "Heartbeat", "SceneId", "ServerId", "Speed", "RoleType", "Address", "LastLogin", "Obs", "Freeze", "Shield", "LastUseFreeze", "LastUseShield", "Timestamp", "IsObs", "IsFreeze", "IsShield", "FreezeIsCD", "ShieldIsCD", "ObsPos", "BoxPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.OtherJoinTeamPush), global::Fight.OtherJoinTeamPush.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.GameStartPush), global::Fight.GameStartPush.Parser, new[]{ "GameId", "Infos", "GameLen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.CancelReadyReq), global::Fight.CancelReadyReq.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.CancelReadyResp), global::Fight.CancelReadyResp.Parser, new[]{ "StatusCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.UserInfoUpdatePush), global::Fight.UserInfoUpdatePush.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.GameInfoReq), global::Fight.GameInfoReq.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.GameInfoResp), global::Fight.GameInfoResp.Parser, new[]{ "UserId", "State", "GameId", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.PropReq), global::Fight.PropReq.Parser, new[]{ "UserId", "PropId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.PropResp), global::Fight.PropResp.Parser, new[]{ "StatusCode", "PropId", "BkCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.PropPush), global::Fight.PropPush.Parser, new[]{ "UserId", "PropId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.HitPropPush), global::Fight.HitPropPush.Parser, new[]{ "UserId", "PropId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.HitObsPush), global::Fight.HitObsPush.Parser, new[]{ "UserId", "ObsId", "Info", "ObsPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.HitBoxPush), global::Fight.HitBoxPush.Parser, new[]{ "UserId", "BoxId", "Info", "BoxPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.GameEndPush), global::Fight.GameEndPush.Parser, new[]{ "GameId", "IsWin", "ReawardCount", "BkCount", "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.ServerInfoReq), global::Fight.ServerInfoReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.ServerInfoResp), global::Fight.ServerInfoResp.Parser, new[]{ "UserCount", "Ip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.FightData), global::Fight.FightData.Parser, new[]{ "Id", "PoliceId", "PoliceName", "PoliceHead", "CriminalId", "CriminalName", "CriminalHead", "SceneId", "RoomId", "RewardId", "RewardCount", "FightResult", "Robot", "Remark", "CreatedAt", "UpdatedAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.FightInfoReq), global::Fight.FightInfoReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.FightInfoResp), global::Fight.FightInfoResp.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.FightListReq), global::Fight.FightListReq.Parser, new[]{ "UserId", "Page", "PageSize", "OrderBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.FightListResp), global::Fight.FightListResp.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.ObsAndBox), global::Fight.ObsAndBox.Parser, new[]{ "Id", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.SceneInitPush), global::Fight.SceneInitPush.Parser, new[]{ "Obss", "Boxs", "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.WinRateReq), global::Fight.WinRateReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.WinRateResp), global::Fight.WinRateResp.Parser, new[]{ "Police", "Criminal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.KickOfflinePush), global::Fight.KickOfflinePush.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.UserInfoReq), global::Fight.UserInfoReq.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fight.UserInfoResp), global::Fight.UserInfoResp.Parser, new[]{ "Info" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 通用↓↓↓↓↓ 
  /// </summary>
  public sealed partial class MessageId : pb::IMessage<MessageId> {
    private static readonly pb::MessageParser<MessageId> _parser = new pb::MessageParser<MessageId>(() => new MessageId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageId(MessageId other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageId Clone() {
      return new MessageId(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageId other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MessageId message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("None")] None = 0,
        /// <summary>
        ///注册
        /// </summary>
        [pbr::OriginalName("Register")] Register = 2000,
        /// <summary>
        ///注册响应
        /// </summary>
        [pbr::OriginalName("RegisterResp")] RegisterResp = 2001,
        /// <summary>
        ///心跳
        /// </summary>
        [pbr::OriginalName("Heartbeat")] Heartbeat = 2002,
        /// <summary>
        ///准备
        /// </summary>
        [pbr::OriginalName("ReadyReq")] ReadyReq = 2003,
        /// <summary>
        ///准备响应
        /// </summary>
        [pbr::OriginalName("ReadyResp")] ReadyResp = 2004,
        /// <summary>
        ///他人进入组队
        /// </summary>
        [pbr::OriginalName("OtherJoinTeamPush")] OtherJoinTeamPush = 2005,
        /// <summary>
        ///队伍人数已满, 开始游戏
        /// </summary>
        [pbr::OriginalName("GameStartPush")] GameStartPush = 2006,
        /// <summary>
        ///取消准备
        /// </summary>
        [pbr::OriginalName("CancelReadyReq")] CancelReadyReq = 2007,
        /// <summary>
        ///取消准备响应
        /// </summary>
        [pbr::OriginalName("CancelReadyResp")] CancelReadyResp = 2008,
        /// <summary>
        ///移动
        /// </summary>
        [pbr::OriginalName("Move")] Move = 2009,
        /// <summary>
        ///使用道具
        /// </summary>
        [pbr::OriginalName("PropReq")] PropReq = 2010,
        /// <summary>
        ///使用道具响应
        /// </summary>
        [pbr::OriginalName("PropResp")] PropResp = 2011,
        /// <summary>
        ///他人使用道具
        /// </summary>
        [pbr::OriginalName("PropPush")] PropPush = 2012,
        /// <summary>
        ///命中道具
        /// </summary>
        [pbr::OriginalName("HitPropPush")] HitPropPush = 2013,
        /// <summary>
        ///游戏结束
        /// </summary>
        [pbr::OriginalName("GameEndPush")] GameEndPush = 2014,
        /// <summary>
        ///玩家状态更新
        /// </summary>
        [pbr::OriginalName("UserInfoUpdatePush")] UserInfoUpdatePush = 2015,
        /// <summary>
        ///玩家当前状态查询
        /// </summary>
        [pbr::OriginalName("UserInfoReq")] UserInfoReq = 2016,
        /// <summary>
        ///玩家当前状态查询响应
        /// </summary>
        [pbr::OriginalName("UserInfoResp")] UserInfoResp = 2017,
        /// <summary>
        ///区服详情
        /// </summary>
        [pbr::OriginalName("ServerInfoReq")] ServerInfoReq = 2018,
        /// <summary>
        ///区服详情响应
        /// </summary>
        [pbr::OriginalName("ServerInfoResp")] ServerInfoResp = 2019,
        /// <summary>
        ///游戏记录查询
        /// </summary>
        [pbr::OriginalName("FightListReq")] FightListReq = 2020,
        /// <summary>
        ///游戏记录响应
        /// </summary>
        [pbr::OriginalName("FightListResp")] FightListResp = 2021,
        /// <summary>
        ///场景障碍物和宝箱初始化下发
        /// </summary>
        [pbr::OriginalName("SceneInitPush")] SceneInitPush = 2022,
        /// <summary>
        ///查看历史胜率请求
        /// </summary>
        [pbr::OriginalName("WinRateReq")] WinRateReq = 2023,
        /// <summary>
        ///查看历史胜率响应
        /// </summary>
        [pbr::OriginalName("WinRateResp")] WinRateResp = 2024,
        /// <summary>
        ///撞到障碍物
        /// </summary>
        [pbr::OriginalName("HitObsPush")] HitObsPush = 2025,
        /// <summary>
        ///撞到宝箱
        /// </summary>
        [pbr::OriginalName("HitBoxPush")] HitBoxPush = 2026,
        /// <summary>
        ///账号其他设备登录
        /// </summary>
        [pbr::OriginalName("KickOfflinePush")] KickOfflinePush = 2027,
        /// <summary>
        ///玩家当前状态查询
        /// </summary>
        [pbr::OriginalName("GameInfoReq")] GameInfoReq = 2028,
        /// <summary>
        ///玩家当前状态查询响应
        /// </summary>
        [pbr::OriginalName("GameInfoResp")] GameInfoResp = 2029,
      }

    }
    #endregion

  }

  /// <summary>
  /// 场景id
  /// </summary>
  public sealed partial class SceneId : pb::IMessage<SceneId> {
    private static readonly pb::MessageParser<SceneId> _parser = new pb::MessageParser<SceneId>(() => new SceneId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneId(SceneId other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneId Clone() {
      return new SceneId(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneId other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SceneId message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("None")] None = 0,
        /// <summary>
        ///客厅
        /// </summary>
        [pbr::OriginalName("ParlorScene")] ParlorScene = 1,
        /// <summary>
        ///狗窝
        /// </summary>
        [pbr::OriginalName("DogScene")] DogScene = 2,
        /// <summary>
        ///救助站
        /// </summary>
        [pbr::OriginalName("ShelterScene")] ShelterScene = 3,
        /// <summary>
        ///寻宝
        /// </summary>
        [pbr::OriginalName("TreasureDigging")] TreasureDigging = 4,
        /// <summary>
        ///卧室
        /// </summary>
        [pbr::OriginalName("Bedroom")] Bedroom = 5,
        /// <summary>
        ///彩虹沙滩
        /// </summary>
        [pbr::OriginalName("RainbowBeach")] RainbowBeach = 6,
        /// <summary>
        ///神秘海湾
        /// </summary>
        [pbr::OriginalName("SteriousSea")] SteriousSea = 7,
        /// <summary>
        ///海底星空
        /// </summary>
        [pbr::OriginalName("StarrySky")] StarrySky = 8,
        /// <summary>
        ///赛车
        /// </summary>
        [pbr::OriginalName("Racing")] Racing = 9,
      }

    }
    #endregion

  }

  public sealed partial class RegisterReq : pb::IMessage<RegisterReq> {
    private static readonly pb::MessageParser<RegisterReq> _parser = new pb::MessageParser<RegisterReq>(() => new RegisterReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterReq(RegisterReq other) : this() {
      token_ = other.token_;
      sceneId_ = other.sceneId_;
      address_ = other.address_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterReq Clone() {
      return new RegisterReq(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private uint sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private string address_ = "";
    /// <summary>
    /// 区服地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 4;
    private ulong userId_;
    /// <summary>
    /// 前端忽略这里
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (SceneId != other.SceneId) return false;
      if (Address != other.Address) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (SceneId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SceneId);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Address);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SceneId);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterReq other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            SceneId = input.ReadUInt32();
            break;
          }
          case 26: {
            Address = input.ReadString();
            break;
          }
          case 32: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterResp : pb::IMessage<RegisterResp> {
    private static readonly pb::MessageParser<RegisterResp> _parser = new pb::MessageParser<RegisterResp>(() => new RegisterResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResp(RegisterResp other) : this() {
      userId_ = other.userId_;
      statusCode_ = other.statusCode_;
      bkCount_ = other.bkCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResp Clone() {
      return new RegisterResp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 2;
    private uint statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "bk_count" field.</summary>
    public const int BkCountFieldNumber = 3;
    private uint bkCount_;
    /// <summary>
    /// 当前贝壳总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BkCount {
      get { return bkCount_; }
      set {
        bkCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (StatusCode != other.StatusCode) return false;
      if (BkCount != other.BkCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (BkCount != 0) hash ^= BkCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (StatusCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatusCode);
      }
      if (BkCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BkCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusCode);
      }
      if (BkCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BkCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterResp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.BkCount != 0) {
        BkCount = other.BkCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            StatusCode = input.ReadUInt32();
            break;
          }
          case 24: {
            BkCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadyReq : pb::IMessage<ReadyReq> {
    private static readonly pb::MessageParser<ReadyReq> _parser = new pb::MessageParser<ReadyReq>(() => new ReadyReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyReq(ReadyReq other) : this() {
      userId_ = other.userId_;
      roleType_ = other.roleType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyReq Clone() {
      return new ReadyReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "role_type" field.</summary>
    public const int RoleTypeFieldNumber = 2;
    private uint roleType_;
    /// <summary>
    ///角色类型  1: 追击者, 2: 出逃者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleType {
      get { return roleType_; }
      set {
        roleType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RoleType != other.RoleType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (RoleType != 0) hash ^= RoleType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (RoleType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoleType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (RoleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadyReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.RoleType != 0) {
        RoleType = other.RoleType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            RoleType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadyResp : pb::IMessage<ReadyResp> {
    private static readonly pb::MessageParser<ReadyResp> _parser = new pb::MessageParser<ReadyResp>(() => new ReadyResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadyResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyResp(ReadyResp other) : this() {
      statusCode_ = other.statusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyResp Clone() {
      return new ReadyResp(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private uint statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadyResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadyResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadyResp other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pos : pb::IMessage<Pos> {
    private static readonly pb::MessageParser<Pos> _parser = new pb::MessageParser<Pos>(() => new Pos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pos(Pos other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pos Clone() {
      return new Pos(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pos other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 人物移动信息
  /// </summary>
  public sealed partial class Move : pb::IMessage<Move> {
    private static readonly pb::MessageParser<Move> _parser = new pb::MessageParser<Move>(() => new Move());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Move> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move(Move other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      index_ = other.index_;
      state_ = other.state_;
      control_ = other.control_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move Clone() {
      return new Move(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Fight.Pos pos_;
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 2;
    private global::Fight.Pos dir_;
    /// <summary>
    /// 朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.Pos Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    /// <summary>
    ///移动状态 1：起步 2：移动中 3：移动结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "control" field.</summary>
    public const int ControlFieldNumber = 5;
    private int control_;
    /// <summary>
    ///赛车主要用到这个字段 1：上 2：下 3：左 4: 右
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Control {
      get { return control_; }
      set {
        control_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 6;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Move);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Move other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      if (Index != other.Index) return false;
      if (State != other.State) return false;
      if (Control != other.Control) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Control != 0) hash ^= Control.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Dir);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      if (Control != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Control);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Control != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Control);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Move other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::Fight.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          Dir = new global::Fight.Pos();
        }
        Dir.MergeFrom(other.Dir);
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Control != 0) {
        Control = other.Control;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              Pos = new global::Fight.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 18: {
            if (dir_ == null) {
              Dir = new global::Fight.Pos();
            }
            input.ReadMessage(Dir);
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 40: {
            Control = input.ReadInt32();
            break;
          }
          case 48: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      userId_ = other.userId_;
      roomId_ = other.roomId_;
      state_ = other.state_;
      userName_ = other.userName_;
      picUrl_ = other.picUrl_;
      gender_ = other.gender_;
      code_ = other.code_;
      age_ = other.age_;
      constell_ = other.constell_;
      avatarIds_ = other.avatarIds_.Clone();
      model_ = other.model_;
      start_ = other.start_;
      curPos_ = other.curPos_ != null ? other.curPos_.Clone() : null;
      networkState_ = other.networkState_;
      heartbeat_ = other.heartbeat_;
      sceneId_ = other.sceneId_;
      serverId_ = other.serverId_;
      speed_ = other.speed_;
      roleType_ = other.roleType_;
      address_ = other.address_;
      lastLogin_ = other.lastLogin_;
      obs_ = other.obs_;
      freeze_ = other.freeze_;
      shield_ = other.shield_;
      lastUseFreeze_ = other.lastUseFreeze_;
      lastUseShield_ = other.lastUseShield_;
      timestamp_ = other.timestamp_;
      isObs_ = other.isObs_;
      isFreeze_ = other.isFreeze_;
      isShield_ = other.isShield_;
      freezeIsCD_ = other.freezeIsCD_;
      shieldIsCD_ = other.shieldIsCD_;
      obsPos_ = other.obsPos_ != null ? other.obsPos_.Clone() : null;
      boxPos_ = other.boxPos_ != null ? other.boxPos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private uint roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 4;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pic_url" field.</summary>
    public const int PicUrlFieldNumber = 5;
    private string picUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PicUrl {
      get { return picUrl_; }
      set {
        picUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 6;
    private string gender_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gender {
      get { return gender_; }
      set {
        gender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 7;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 8;
    private string age_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Age {
      get { return age_; }
      set {
        age_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "constell" field.</summary>
    public const int ConstellFieldNumber = 9;
    private string constell_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Constell {
      get { return constell_; }
      set {
        constell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_ids" field.</summary>
    public const int AvatarIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<long> _repeated_avatarIds_codec
        = pb::FieldCodec.ForInt64(82);
    private readonly pbc::RepeatedField<long> avatarIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///服装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> AvatarIds {
      get { return avatarIds_; }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 11;
    private uint model_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 12;
    private uint start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "cur_pos" field.</summary>
    public const int CurPosFieldNumber = 13;
    private global::Fight.Move curPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.Move CurPos {
      get { return curPos_; }
      set {
        curPos_ = value;
      }
    }

    /// <summary>Field number for the "network_state" field.</summary>
    public const int NetworkStateFieldNumber = 14;
    private uint networkState_;
    /// <summary>
    ///网络状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetworkState {
      get { return networkState_; }
      set {
        networkState_ = value;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 15;
    private uint heartbeat_;
    /// <summary>
    ///上次心跳时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Heartbeat {
      get { return heartbeat_; }
      set {
        heartbeat_ = value;
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 16;
    private uint sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 17;
    private uint serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 18;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "role_type" field.</summary>
    public const int RoleTypeFieldNumber = 19;
    private uint roleType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleType {
      get { return roleType_; }
      set {
        roleType_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 20;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_login" field.</summary>
    public const int LastLoginFieldNumber = 21;
    private uint lastLogin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastLogin {
      get { return lastLogin_; }
      set {
        lastLogin_ = value;
      }
    }

    /// <summary>Field number for the "Obs" field.</summary>
    public const int ObsFieldNumber = 22;
    private int obs_;
    /// <summary>
    /// 撞到障碍物眩晕剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Obs {
      get { return obs_; }
      set {
        obs_ = value;
      }
    }

    /// <summary>Field number for the "Freeze" field.</summary>
    public const int FreezeFieldNumber = 23;
    private int freeze_;
    /// <summary>
    /// 被冰冻剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Freeze {
      get { return freeze_; }
      set {
        freeze_ = value;
      }
    }

    /// <summary>Field number for the "Shield" field.</summary>
    public const int ShieldFieldNumber = 24;
    private int shield_;
    /// <summary>
    /// 护盾剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shield {
      get { return shield_; }
      set {
        shield_ = value;
      }
    }

    /// <summary>Field number for the "LastUseFreeze" field.</summary>
    public const int LastUseFreezeFieldNumber = 25;
    private long lastUseFreeze_;
    /// <summary>
    /// 最后花贝壳使用冰冻技能时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUseFreeze {
      get { return lastUseFreeze_; }
      set {
        lastUseFreeze_ = value;
      }
    }

    /// <summary>Field number for the "LastUseShield" field.</summary>
    public const int LastUseShieldFieldNumber = 26;
    private long lastUseShield_;
    /// <summary>
    /// 最后花贝壳使用护盾技能时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUseShield {
      get { return lastUseShield_; }
      set {
        lastUseShield_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 27;
    private long timestamp_;
    /// <summary>
    /// 时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "isObs" field.</summary>
    public const int IsObsFieldNumber = 28;
    private bool isObs_;
    /// <summary>
    /// 是否撞到障碍物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsObs {
      get { return isObs_; }
      set {
        isObs_ = value;
      }
    }

    /// <summary>Field number for the "isFreeze" field.</summary>
    public const int IsFreezeFieldNumber = 29;
    private bool isFreeze_;
    /// <summary>
    /// 是否被冰冻
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFreeze {
      get { return isFreeze_; }
      set {
        isFreeze_ = value;
      }
    }

    /// <summary>Field number for the "isShield" field.</summary>
    public const int IsShieldFieldNumber = 30;
    private bool isShield_;
    /// <summary>
    /// 是否开启保护罩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShield {
      get { return isShield_; }
      set {
        isShield_ = value;
      }
    }

    /// <summary>Field number for the "freezeIsCD" field.</summary>
    public const int FreezeIsCDFieldNumber = 31;
    private bool freezeIsCD_;
    /// <summary>
    /// 冰冻是否CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FreezeIsCD {
      get { return freezeIsCD_; }
      set {
        freezeIsCD_ = value;
      }
    }

    /// <summary>Field number for the "shieldIsCD" field.</summary>
    public const int ShieldIsCDFieldNumber = 32;
    private bool shieldIsCD_;
    /// <summary>
    /// 保护罩是否CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShieldIsCD {
      get { return shieldIsCD_; }
      set {
        shieldIsCD_ = value;
      }
    }

    /// <summary>Field number for the "obs_pos" field.</summary>
    public const int ObsPosFieldNumber = 33;
    private global::Fight.Pos obsPos_;
    /// <summary>
    /// 障碍物位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.Pos ObsPos {
      get { return obsPos_; }
      set {
        obsPos_ = value;
      }
    }

    /// <summary>Field number for the "box_pos" field.</summary>
    public const int BoxPosFieldNumber = 34;
    private global::Fight.Pos boxPos_;
    /// <summary>
    /// 宝箱位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.Pos BoxPos {
      get { return boxPos_; }
      set {
        boxPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RoomId != other.RoomId) return false;
      if (State != other.State) return false;
      if (UserName != other.UserName) return false;
      if (PicUrl != other.PicUrl) return false;
      if (Gender != other.Gender) return false;
      if (Code != other.Code) return false;
      if (Age != other.Age) return false;
      if (Constell != other.Constell) return false;
      if(!avatarIds_.Equals(other.avatarIds_)) return false;
      if (Model != other.Model) return false;
      if (Start != other.Start) return false;
      if (!object.Equals(CurPos, other.CurPos)) return false;
      if (NetworkState != other.NetworkState) return false;
      if (Heartbeat != other.Heartbeat) return false;
      if (SceneId != other.SceneId) return false;
      if (ServerId != other.ServerId) return false;
      if (Speed != other.Speed) return false;
      if (RoleType != other.RoleType) return false;
      if (Address != other.Address) return false;
      if (LastLogin != other.LastLogin) return false;
      if (Obs != other.Obs) return false;
      if (Freeze != other.Freeze) return false;
      if (Shield != other.Shield) return false;
      if (LastUseFreeze != other.LastUseFreeze) return false;
      if (LastUseShield != other.LastUseShield) return false;
      if (Timestamp != other.Timestamp) return false;
      if (IsObs != other.IsObs) return false;
      if (IsFreeze != other.IsFreeze) return false;
      if (IsShield != other.IsShield) return false;
      if (FreezeIsCD != other.FreezeIsCD) return false;
      if (ShieldIsCD != other.ShieldIsCD) return false;
      if (!object.Equals(ObsPos, other.ObsPos)) return false;
      if (!object.Equals(BoxPos, other.BoxPos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (PicUrl.Length != 0) hash ^= PicUrl.GetHashCode();
      if (Gender.Length != 0) hash ^= Gender.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Age.Length != 0) hash ^= Age.GetHashCode();
      if (Constell.Length != 0) hash ^= Constell.GetHashCode();
      hash ^= avatarIds_.GetHashCode();
      if (Model != 0) hash ^= Model.GetHashCode();
      if (Start != 0) hash ^= Start.GetHashCode();
      if (curPos_ != null) hash ^= CurPos.GetHashCode();
      if (NetworkState != 0) hash ^= NetworkState.GetHashCode();
      if (Heartbeat != 0) hash ^= Heartbeat.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (RoleType != 0) hash ^= RoleType.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (LastLogin != 0) hash ^= LastLogin.GetHashCode();
      if (Obs != 0) hash ^= Obs.GetHashCode();
      if (Freeze != 0) hash ^= Freeze.GetHashCode();
      if (Shield != 0) hash ^= Shield.GetHashCode();
      if (LastUseFreeze != 0L) hash ^= LastUseFreeze.GetHashCode();
      if (LastUseShield != 0L) hash ^= LastUseShield.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (IsObs != false) hash ^= IsObs.GetHashCode();
      if (IsFreeze != false) hash ^= IsFreeze.GetHashCode();
      if (IsShield != false) hash ^= IsShield.GetHashCode();
      if (FreezeIsCD != false) hash ^= FreezeIsCD.GetHashCode();
      if (ShieldIsCD != false) hash ^= ShieldIsCD.GetHashCode();
      if (obsPos_ != null) hash ^= ObsPos.GetHashCode();
      if (boxPos_ != null) hash ^= BoxPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomId);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(State);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserName);
      }
      if (PicUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PicUrl);
      }
      if (Gender.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Gender);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Code);
      }
      if (Age.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Age);
      }
      if (Constell.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Constell);
      }
      avatarIds_.WriteTo(output, _repeated_avatarIds_codec);
      if (Model != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Model);
      }
      if (Start != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Start);
      }
      if (curPos_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CurPos);
      }
      if (NetworkState != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(NetworkState);
      }
      if (Heartbeat != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Heartbeat);
      }
      if (SceneId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(SceneId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ServerId);
      }
      if (Speed != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Speed);
      }
      if (RoleType != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(RoleType);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Address);
      }
      if (LastLogin != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(LastLogin);
      }
      if (Obs != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Obs);
      }
      if (Freeze != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Freeze);
      }
      if (Shield != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Shield);
      }
      if (LastUseFreeze != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(LastUseFreeze);
      }
      if (LastUseShield != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(LastUseShield);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(Timestamp);
      }
      if (IsObs != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsObs);
      }
      if (IsFreeze != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IsFreeze);
      }
      if (IsShield != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsShield);
      }
      if (FreezeIsCD != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(FreezeIsCD);
      }
      if (ShieldIsCD != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(ShieldIsCD);
      }
      if (obsPos_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(ObsPos);
      }
      if (boxPos_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(BoxPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (PicUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PicUrl);
      }
      if (Gender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gender);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Age.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Age);
      }
      if (Constell.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Constell);
      }
      size += avatarIds_.CalculateSize(_repeated_avatarIds_codec);
      if (Model != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Model);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Start);
      }
      if (curPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurPos);
      }
      if (NetworkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetworkState);
      }
      if (Heartbeat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Heartbeat);
      }
      if (SceneId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SceneId);
      }
      if (ServerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (Speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (RoleType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RoleType);
      }
      if (Address.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (LastLogin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastLogin);
      }
      if (Obs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Obs);
      }
      if (Freeze != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Freeze);
      }
      if (Shield != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Shield);
      }
      if (LastUseFreeze != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastUseFreeze);
      }
      if (LastUseShield != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastUseShield);
      }
      if (Timestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (IsObs != false) {
        size += 2 + 1;
      }
      if (IsFreeze != false) {
        size += 2 + 1;
      }
      if (IsShield != false) {
        size += 2 + 1;
      }
      if (FreezeIsCD != false) {
        size += 2 + 1;
      }
      if (ShieldIsCD != false) {
        size += 2 + 1;
      }
      if (obsPos_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ObsPos);
      }
      if (boxPos_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BoxPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.PicUrl.Length != 0) {
        PicUrl = other.PicUrl;
      }
      if (other.Gender.Length != 0) {
        Gender = other.Gender;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Age.Length != 0) {
        Age = other.Age;
      }
      if (other.Constell.Length != 0) {
        Constell = other.Constell;
      }
      avatarIds_.Add(other.avatarIds_);
      if (other.Model != 0) {
        Model = other.Model;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.curPos_ != null) {
        if (curPos_ == null) {
          CurPos = new global::Fight.Move();
        }
        CurPos.MergeFrom(other.CurPos);
      }
      if (other.NetworkState != 0) {
        NetworkState = other.NetworkState;
      }
      if (other.Heartbeat != 0) {
        Heartbeat = other.Heartbeat;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.RoleType != 0) {
        RoleType = other.RoleType;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.LastLogin != 0) {
        LastLogin = other.LastLogin;
      }
      if (other.Obs != 0) {
        Obs = other.Obs;
      }
      if (other.Freeze != 0) {
        Freeze = other.Freeze;
      }
      if (other.Shield != 0) {
        Shield = other.Shield;
      }
      if (other.LastUseFreeze != 0L) {
        LastUseFreeze = other.LastUseFreeze;
      }
      if (other.LastUseShield != 0L) {
        LastUseShield = other.LastUseShield;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.IsObs != false) {
        IsObs = other.IsObs;
      }
      if (other.IsFreeze != false) {
        IsFreeze = other.IsFreeze;
      }
      if (other.IsShield != false) {
        IsShield = other.IsShield;
      }
      if (other.FreezeIsCD != false) {
        FreezeIsCD = other.FreezeIsCD;
      }
      if (other.ShieldIsCD != false) {
        ShieldIsCD = other.ShieldIsCD;
      }
      if (other.obsPos_ != null) {
        if (obsPos_ == null) {
          ObsPos = new global::Fight.Pos();
        }
        ObsPos.MergeFrom(other.ObsPos);
      }
      if (other.boxPos_ != null) {
        if (boxPos_ == null) {
          BoxPos = new global::Fight.Pos();
        }
        BoxPos.MergeFrom(other.BoxPos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 24: {
            State = input.ReadUInt32();
            break;
          }
          case 34: {
            UserName = input.ReadString();
            break;
          }
          case 42: {
            PicUrl = input.ReadString();
            break;
          }
          case 50: {
            Gender = input.ReadString();
            break;
          }
          case 58: {
            Code = input.ReadString();
            break;
          }
          case 66: {
            Age = input.ReadString();
            break;
          }
          case 74: {
            Constell = input.ReadString();
            break;
          }
          case 82:
          case 80: {
            avatarIds_.AddEntriesFrom(input, _repeated_avatarIds_codec);
            break;
          }
          case 88: {
            Model = input.ReadUInt32();
            break;
          }
          case 96: {
            Start = input.ReadUInt32();
            break;
          }
          case 106: {
            if (curPos_ == null) {
              CurPos = new global::Fight.Move();
            }
            input.ReadMessage(CurPos);
            break;
          }
          case 112: {
            NetworkState = input.ReadUInt32();
            break;
          }
          case 120: {
            Heartbeat = input.ReadUInt32();
            break;
          }
          case 128: {
            SceneId = input.ReadUInt32();
            break;
          }
          case 136: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 144: {
            Speed = input.ReadInt32();
            break;
          }
          case 152: {
            RoleType = input.ReadUInt32();
            break;
          }
          case 162: {
            Address = input.ReadString();
            break;
          }
          case 168: {
            LastLogin = input.ReadUInt32();
            break;
          }
          case 176: {
            Obs = input.ReadInt32();
            break;
          }
          case 184: {
            Freeze = input.ReadInt32();
            break;
          }
          case 192: {
            Shield = input.ReadInt32();
            break;
          }
          case 200: {
            LastUseFreeze = input.ReadInt64();
            break;
          }
          case 208: {
            LastUseShield = input.ReadInt64();
            break;
          }
          case 216: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 224: {
            IsObs = input.ReadBool();
            break;
          }
          case 232: {
            IsFreeze = input.ReadBool();
            break;
          }
          case 240: {
            IsShield = input.ReadBool();
            break;
          }
          case 248: {
            FreezeIsCD = input.ReadBool();
            break;
          }
          case 256: {
            ShieldIsCD = input.ReadBool();
            break;
          }
          case 266: {
            if (obsPos_ == null) {
              ObsPos = new global::Fight.Pos();
            }
            input.ReadMessage(ObsPos);
            break;
          }
          case 274: {
            if (boxPos_ == null) {
              BoxPos = new global::Fight.Pos();
            }
            input.ReadMessage(BoxPos);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OtherJoinTeamPush : pb::IMessage<OtherJoinTeamPush> {
    private static readonly pb::MessageParser<OtherJoinTeamPush> _parser = new pb::MessageParser<OtherJoinTeamPush>(() => new OtherJoinTeamPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherJoinTeamPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherJoinTeamPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherJoinTeamPush(OtherJoinTeamPush other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherJoinTeamPush Clone() {
      return new OtherJoinTeamPush(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Fight.UserInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.UserInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtherJoinTeamPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtherJoinTeamPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtherJoinTeamPush other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Fight.UserInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Fight.UserInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStartPush : pb::IMessage<GameStartPush> {
    private static readonly pb::MessageParser<GameStartPush> _parser = new pb::MessageParser<GameStartPush>(() => new GameStartPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStartPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStartPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStartPush(GameStartPush other) : this() {
      gameId_ = other.gameId_;
      infos_ = other.infos_.Clone();
      gameLen_ = other.gameLen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStartPush Clone() {
      return new GameStartPush(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private ulong gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Fight.UserInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(18, global::Fight.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::Fight.UserInfo> infos_ = new pbc::RepeatedField<global::Fight.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Fight.UserInfo> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "game_len" field.</summary>
    public const int GameLenFieldNumber = 3;
    private int gameLen_;
    /// <summary>
    /// 一局游戏最长时间(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameLen {
      get { return gameLen_; }
      set {
        gameLen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStartPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStartPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if(!infos_.Equals(other.infos_)) return false;
      if (GameLen != other.GameLen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0UL) hash ^= GameId.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (GameLen != 0) hash ^= GameLen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GameId);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (GameLen != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameLen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameId);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (GameLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameLen);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStartPush other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0UL) {
        GameId = other.GameId;
      }
      infos_.Add(other.infos_);
      if (other.GameLen != 0) {
        GameLen = other.GameLen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadUInt64();
            break;
          }
          case 18: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 24: {
            GameLen = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelReadyReq : pb::IMessage<CancelReadyReq> {
    private static readonly pb::MessageParser<CancelReadyReq> _parser = new pb::MessageParser<CancelReadyReq>(() => new CancelReadyReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelReadyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReadyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReadyReq(CancelReadyReq other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReadyReq Clone() {
      return new CancelReadyReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelReadyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelReadyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelReadyReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelReadyResp : pb::IMessage<CancelReadyResp> {
    private static readonly pb::MessageParser<CancelReadyResp> _parser = new pb::MessageParser<CancelReadyResp>(() => new CancelReadyResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelReadyResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReadyResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReadyResp(CancelReadyResp other) : this() {
      statusCode_ = other.statusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReadyResp Clone() {
      return new CancelReadyResp(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private uint statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelReadyResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelReadyResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelReadyResp other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfoUpdatePush : pb::IMessage<UserInfoUpdatePush> {
    private static readonly pb::MessageParser<UserInfoUpdatePush> _parser = new pb::MessageParser<UserInfoUpdatePush>(() => new UserInfoUpdatePush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoUpdatePush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoUpdatePush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoUpdatePush(UserInfoUpdatePush other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoUpdatePush Clone() {
      return new UserInfoUpdatePush(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Fight.UserInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.UserInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoUpdatePush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoUpdatePush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoUpdatePush other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Fight.UserInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Fight.UserInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameInfoReq : pb::IMessage<GameInfoReq> {
    private static readonly pb::MessageParser<GameInfoReq> _parser = new pb::MessageParser<GameInfoReq>(() => new GameInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfoReq(GameInfoReq other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfoReq Clone() {
      return new GameInfoReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameInfoResp : pb::IMessage<GameInfoResp> {
    private static readonly pb::MessageParser<GameInfoResp> _parser = new pb::MessageParser<GameInfoResp>(() => new GameInfoResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfoResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfoResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfoResp(GameInfoResp other) : this() {
      userId_ = other.userId_;
      state_ = other.state_;
      gameId_ = other.gameId_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfoResp Clone() {
      return new GameInfoResp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private uint gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Fight.UserInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(34, global::Fight.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::Fight.UserInfo> info_ = new pbc::RepeatedField<global::Fight.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Fight.UserInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfoResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfoResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (State != other.State) return false;
      if (GameId != other.GameId) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(State);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameId);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfoResp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            State = input.ReadUInt32();
            break;
          }
          case 24: {
            GameId = input.ReadUInt32();
            break;
          }
          case 34: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropReq : pb::IMessage<PropReq> {
    private static readonly pb::MessageParser<PropReq> _parser = new pb::MessageParser<PropReq>(() => new PropReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropReq(PropReq other) : this() {
      userId_ = other.userId_;
      propId_ = other.propId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropReq Clone() {
      return new PropReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 2;
    private uint propId_;
    /// <summary>
    /// 1: 冰冻, 2: 护盾
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (PropId != other.PropId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            PropId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropResp : pb::IMessage<PropResp> {
    private static readonly pb::MessageParser<PropResp> _parser = new pb::MessageParser<PropResp>(() => new PropResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropResp(PropResp other) : this() {
      statusCode_ = other.statusCode_;
      propId_ = other.propId_;
      bkCount_ = other.bkCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropResp Clone() {
      return new PropResp(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private uint statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 2;
    private uint propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "bk_count" field.</summary>
    public const int BkCountFieldNumber = 3;
    private uint bkCount_;
    /// <summary>
    /// 贝壳剩余数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BkCount {
      get { return bkCount_; }
      set {
        bkCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (PropId != other.PropId) return false;
      if (BkCount != other.BkCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (BkCount != 0) hash ^= BkCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StatusCode);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PropId);
      }
      if (BkCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BkCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusCode);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropId);
      }
      if (BkCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BkCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropResp other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.BkCount != 0) {
        BkCount = other.BkCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = input.ReadUInt32();
            break;
          }
          case 16: {
            PropId = input.ReadUInt32();
            break;
          }
          case 24: {
            BkCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropPush : pb::IMessage<PropPush> {
    private static readonly pb::MessageParser<PropPush> _parser = new pb::MessageParser<PropPush>(() => new PropPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropPush(PropPush other) : this() {
      userId_ = other.userId_;
      propId_ = other.propId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropPush Clone() {
      return new PropPush(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 2;
    private uint propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (PropId != other.PropId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropPush other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            PropId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HitPropPush : pb::IMessage<HitPropPush> {
    private static readonly pb::MessageParser<HitPropPush> _parser = new pb::MessageParser<HitPropPush>(() => new HitPropPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitPropPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitPropPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitPropPush(HitPropPush other) : this() {
      userId_ = other.userId_;
      propId_ = other.propId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitPropPush Clone() {
      return new HitPropPush(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 2;
    private uint propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitPropPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitPropPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (PropId != other.PropId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitPropPush other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            PropId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HitObsPush : pb::IMessage<HitObsPush> {
    private static readonly pb::MessageParser<HitObsPush> _parser = new pb::MessageParser<HitObsPush>(() => new HitObsPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitObsPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitObsPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitObsPush(HitObsPush other) : this() {
      userId_ = other.userId_;
      obsId_ = other.obsId_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      obsPos_ = other.obsPos_ != null ? other.obsPos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitObsPush Clone() {
      return new HitObsPush(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "obs_id" field.</summary>
    public const int ObsIdFieldNumber = 2;
    private ulong obsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObsId {
      get { return obsId_; }
      set {
        obsId_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private global::Fight.UserInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.UserInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "obs_pos" field.</summary>
    public const int ObsPosFieldNumber = 4;
    private global::Fight.Pos obsPos_;
    /// <summary>
    /// 障碍物位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.Pos ObsPos {
      get { return obsPos_; }
      set {
        obsPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitObsPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitObsPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ObsId != other.ObsId) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(ObsPos, other.ObsPos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ObsId != 0UL) hash ^= ObsId.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (obsPos_ != null) hash ^= ObsPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ObsId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ObsId);
      }
      if (info_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
      if (obsPos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ObsPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ObsId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObsId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (obsPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObsPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitObsPush other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ObsId != 0UL) {
        ObsId = other.ObsId;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Fight.UserInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.obsPos_ != null) {
        if (obsPos_ == null) {
          ObsPos = new global::Fight.Pos();
        }
        ObsPos.MergeFrom(other.ObsPos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ObsId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (info_ == null) {
              Info = new global::Fight.UserInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 34: {
            if (obsPos_ == null) {
              ObsPos = new global::Fight.Pos();
            }
            input.ReadMessage(ObsPos);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HitBoxPush : pb::IMessage<HitBoxPush> {
    private static readonly pb::MessageParser<HitBoxPush> _parser = new pb::MessageParser<HitBoxPush>(() => new HitBoxPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitBoxPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitBoxPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitBoxPush(HitBoxPush other) : this() {
      userId_ = other.userId_;
      boxId_ = other.boxId_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      boxPos_ = other.boxPos_ != null ? other.boxPos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitBoxPush Clone() {
      return new HitBoxPush(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "box_id" field.</summary>
    public const int BoxIdFieldNumber = 2;
    private ulong boxId_;
    /// <summary>
    /// 1: 冰冻, 2: 护盾
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BoxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private global::Fight.UserInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.UserInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "box_pos" field.</summary>
    public const int BoxPosFieldNumber = 4;
    private global::Fight.Pos boxPos_;
    /// <summary>
    /// 宝箱位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.Pos BoxPos {
      get { return boxPos_; }
      set {
        boxPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitBoxPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitBoxPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (BoxId != other.BoxId) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(BoxPos, other.BoxPos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (BoxId != 0UL) hash ^= BoxId.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (boxPos_ != null) hash ^= BoxPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (BoxId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BoxId);
      }
      if (info_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
      if (boxPos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BoxPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (BoxId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BoxId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (boxPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoxPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitBoxPush other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.BoxId != 0UL) {
        BoxId = other.BoxId;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Fight.UserInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.boxPos_ != null) {
        if (boxPos_ == null) {
          BoxPos = new global::Fight.Pos();
        }
        BoxPos.MergeFrom(other.BoxPos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            BoxId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (info_ == null) {
              Info = new global::Fight.UserInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 34: {
            if (boxPos_ == null) {
              BoxPos = new global::Fight.Pos();
            }
            input.ReadMessage(BoxPos);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameEndPush : pb::IMessage<GameEndPush> {
    private static readonly pb::MessageParser<GameEndPush> _parser = new pb::MessageParser<GameEndPush>(() => new GameEndPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEndPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEndPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEndPush(GameEndPush other) : this() {
      gameId_ = other.gameId_;
      isWin_ = other.isWin_;
      reawardCount_ = other.reawardCount_;
      bkCount_ = other.bkCount_;
      infos_ = other.infos_ != null ? other.infos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEndPush Clone() {
      return new GameEndPush(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private ulong gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "is_win" field.</summary>
    public const int IsWinFieldNumber = 2;
    private bool isWin_;
    /// <summary>
    /// 胜利/失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    /// <summary>Field number for the "reaward_count" field.</summary>
    public const int ReawardCountFieldNumber = 3;
    private uint reawardCount_;
    /// <summary>
    /// 奖励贝壳数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReawardCount {
      get { return reawardCount_; }
      set {
        reawardCount_ = value;
      }
    }

    /// <summary>Field number for the "bk_count" field.</summary>
    public const int BkCountFieldNumber = 4;
    private uint bkCount_;
    /// <summary>
    /// 当前贝壳总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BkCount {
      get { return bkCount_; }
      set {
        bkCount_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 5;
    private global::Fight.UserInfo infos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.UserInfo Infos {
      get { return infos_; }
      set {
        infos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEndPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEndPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (IsWin != other.IsWin) return false;
      if (ReawardCount != other.ReawardCount) return false;
      if (BkCount != other.BkCount) return false;
      if (!object.Equals(Infos, other.Infos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0UL) hash ^= GameId.GetHashCode();
      if (IsWin != false) hash ^= IsWin.GetHashCode();
      if (ReawardCount != 0) hash ^= ReawardCount.GetHashCode();
      if (BkCount != 0) hash ^= BkCount.GetHashCode();
      if (infos_ != null) hash ^= Infos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GameId);
      }
      if (IsWin != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsWin);
      }
      if (ReawardCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ReawardCount);
      }
      if (BkCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BkCount);
      }
      if (infos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Infos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameId);
      }
      if (IsWin != false) {
        size += 1 + 1;
      }
      if (ReawardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReawardCount);
      }
      if (BkCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BkCount);
      }
      if (infos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Infos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEndPush other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0UL) {
        GameId = other.GameId;
      }
      if (other.IsWin != false) {
        IsWin = other.IsWin;
      }
      if (other.ReawardCount != 0) {
        ReawardCount = other.ReawardCount;
      }
      if (other.BkCount != 0) {
        BkCount = other.BkCount;
      }
      if (other.infos_ != null) {
        if (infos_ == null) {
          Infos = new global::Fight.UserInfo();
        }
        Infos.MergeFrom(other.Infos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadUInt64();
            break;
          }
          case 16: {
            IsWin = input.ReadBool();
            break;
          }
          case 24: {
            ReawardCount = input.ReadUInt32();
            break;
          }
          case 32: {
            BkCount = input.ReadUInt32();
            break;
          }
          case 42: {
            if (infos_ == null) {
              Infos = new global::Fight.UserInfo();
            }
            input.ReadMessage(Infos);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInfoReq : pb::IMessage<ServerInfoReq> {
    private static readonly pb::MessageParser<ServerInfoReq> _parser = new pb::MessageParser<ServerInfoReq>(() => new ServerInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReq(ServerInfoReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReq Clone() {
      return new ServerInfoReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfoReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ServerInfoResp : pb::IMessage<ServerInfoResp> {
    private static readonly pb::MessageParser<ServerInfoResp> _parser = new pb::MessageParser<ServerInfoResp>(() => new ServerInfoResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfoResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoResp(ServerInfoResp other) : this() {
      userCount_ = other.userCount_;
      ip_ = other.ip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoResp Clone() {
      return new ServerInfoResp(this);
    }

    /// <summary>Field number for the "user_count" field.</summary>
    public const int UserCountFieldNumber = 1;
    private uint userCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserCount {
      get { return userCount_; }
      set {
        userCount_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfoResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfoResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserCount != other.UserCount) return false;
      if (Ip != other.Ip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserCount != 0) hash ^= UserCount.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserCount);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserCount);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfoResp other) {
      if (other == null) {
        return;
      }
      if (other.UserCount != 0) {
        UserCount = other.UserCount;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserCount = input.ReadUInt32();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FightData : pb::IMessage<FightData> {
    private static readonly pb::MessageParser<FightData> _parser = new pb::MessageParser<FightData>(() => new FightData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightData(FightData other) : this() {
      id_ = other.id_;
      policeId_ = other.policeId_;
      policeName_ = other.policeName_;
      policeHead_ = other.policeHead_;
      criminalId_ = other.criminalId_;
      criminalName_ = other.criminalName_;
      criminalHead_ = other.criminalHead_;
      sceneId_ = other.sceneId_;
      roomId_ = other.roomId_;
      rewardId_ = other.rewardId_;
      rewardCount_ = other.rewardCount_;
      fightResult_ = other.fightResult_;
      robot_ = other.robot_;
      remark_ = other.remark_;
      createdAt_ = other.createdAt_;
      updatedAt_ = other.updatedAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightData Clone() {
      return new FightData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "police_id" field.</summary>
    public const int PoliceIdFieldNumber = 2;
    private ulong policeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PoliceId {
      get { return policeId_; }
      set {
        policeId_ = value;
      }
    }

    /// <summary>Field number for the "police_name" field.</summary>
    public const int PoliceNameFieldNumber = 3;
    private string policeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoliceName {
      get { return policeName_; }
      set {
        policeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "police_head" field.</summary>
    public const int PoliceHeadFieldNumber = 4;
    private string policeHead_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoliceHead {
      get { return policeHead_; }
      set {
        policeHead_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "criminal_id" field.</summary>
    public const int CriminalIdFieldNumber = 5;
    private ulong criminalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CriminalId {
      get { return criminalId_; }
      set {
        criminalId_ = value;
      }
    }

    /// <summary>Field number for the "criminal_name" field.</summary>
    public const int CriminalNameFieldNumber = 6;
    private string criminalName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CriminalName {
      get { return criminalName_; }
      set {
        criminalName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "criminal_head" field.</summary>
    public const int CriminalHeadFieldNumber = 7;
    private string criminalHead_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CriminalHead {
      get { return criminalHead_; }
      set {
        criminalHead_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 8;
    private uint sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 9;
    private uint roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "reward_id" field.</summary>
    public const int RewardIdFieldNumber = 10;
    private uint rewardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = value;
      }
    }

    /// <summary>Field number for the "reward_count" field.</summary>
    public const int RewardCountFieldNumber = 11;
    private uint rewardCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardCount {
      get { return rewardCount_; }
      set {
        rewardCount_ = value;
      }
    }

    /// <summary>Field number for the "fight_result" field.</summary>
    public const int FightResultFieldNumber = 12;
    private uint fightResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FightResult {
      get { return fightResult_; }
      set {
        fightResult_ = value;
      }
    }

    /// <summary>Field number for the "robot" field.</summary>
    public const int RobotFieldNumber = 13;
    private uint robot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Robot {
      get { return robot_; }
      set {
        robot_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 14;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 15;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 16;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PoliceId != other.PoliceId) return false;
      if (PoliceName != other.PoliceName) return false;
      if (PoliceHead != other.PoliceHead) return false;
      if (CriminalId != other.CriminalId) return false;
      if (CriminalName != other.CriminalName) return false;
      if (CriminalHead != other.CriminalHead) return false;
      if (SceneId != other.SceneId) return false;
      if (RoomId != other.RoomId) return false;
      if (RewardId != other.RewardId) return false;
      if (RewardCount != other.RewardCount) return false;
      if (FightResult != other.FightResult) return false;
      if (Robot != other.Robot) return false;
      if (Remark != other.Remark) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (PoliceId != 0UL) hash ^= PoliceId.GetHashCode();
      if (PoliceName.Length != 0) hash ^= PoliceName.GetHashCode();
      if (PoliceHead.Length != 0) hash ^= PoliceHead.GetHashCode();
      if (CriminalId != 0UL) hash ^= CriminalId.GetHashCode();
      if (CriminalName.Length != 0) hash ^= CriminalName.GetHashCode();
      if (CriminalHead.Length != 0) hash ^= CriminalHead.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (RewardId != 0) hash ^= RewardId.GetHashCode();
      if (RewardCount != 0) hash ^= RewardCount.GetHashCode();
      if (FightResult != 0) hash ^= FightResult.GetHashCode();
      if (Robot != 0) hash ^= Robot.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (PoliceId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PoliceId);
      }
      if (PoliceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PoliceName);
      }
      if (PoliceHead.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PoliceHead);
      }
      if (CriminalId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(CriminalId);
      }
      if (CriminalName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CriminalName);
      }
      if (CriminalHead.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CriminalHead);
      }
      if (SceneId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SceneId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(RoomId);
      }
      if (RewardId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RewardId);
      }
      if (RewardCount != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RewardCount);
      }
      if (FightResult != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(FightResult);
      }
      if (Robot != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Robot);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Remark);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(UpdatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (PoliceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PoliceId);
      }
      if (PoliceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PoliceName);
      }
      if (PoliceHead.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PoliceHead);
      }
      if (CriminalId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CriminalId);
      }
      if (CriminalName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CriminalName);
      }
      if (CriminalHead.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CriminalHead);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SceneId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (RewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardId);
      }
      if (RewardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardCount);
      }
      if (FightResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FightResult);
      }
      if (Robot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Robot);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.PoliceId != 0UL) {
        PoliceId = other.PoliceId;
      }
      if (other.PoliceName.Length != 0) {
        PoliceName = other.PoliceName;
      }
      if (other.PoliceHead.Length != 0) {
        PoliceHead = other.PoliceHead;
      }
      if (other.CriminalId != 0UL) {
        CriminalId = other.CriminalId;
      }
      if (other.CriminalName.Length != 0) {
        CriminalName = other.CriminalName;
      }
      if (other.CriminalHead.Length != 0) {
        CriminalHead = other.CriminalHead;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.RewardId != 0) {
        RewardId = other.RewardId;
      }
      if (other.RewardCount != 0) {
        RewardCount = other.RewardCount;
      }
      if (other.FightResult != 0) {
        FightResult = other.FightResult;
      }
      if (other.Robot != 0) {
        Robot = other.Robot;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            PoliceId = input.ReadUInt64();
            break;
          }
          case 26: {
            PoliceName = input.ReadString();
            break;
          }
          case 34: {
            PoliceHead = input.ReadString();
            break;
          }
          case 40: {
            CriminalId = input.ReadUInt64();
            break;
          }
          case 50: {
            CriminalName = input.ReadString();
            break;
          }
          case 58: {
            CriminalHead = input.ReadString();
            break;
          }
          case 64: {
            SceneId = input.ReadUInt32();
            break;
          }
          case 72: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 80: {
            RewardId = input.ReadUInt32();
            break;
          }
          case 88: {
            RewardCount = input.ReadUInt32();
            break;
          }
          case 96: {
            FightResult = input.ReadUInt32();
            break;
          }
          case 104: {
            Robot = input.ReadUInt32();
            break;
          }
          case 114: {
            Remark = input.ReadString();
            break;
          }
          case 120: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 128: {
            UpdatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FightInfoReq : pb::IMessage<FightInfoReq> {
    private static readonly pb::MessageParser<FightInfoReq> _parser = new pb::MessageParser<FightInfoReq>(() => new FightInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightInfoReq(FightInfoReq other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightInfoReq Clone() {
      return new FightInfoReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FightInfoResp : pb::IMessage<FightInfoResp> {
    private static readonly pb::MessageParser<FightInfoResp> _parser = new pb::MessageParser<FightInfoResp>(() => new FightInfoResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightInfoResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightInfoResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightInfoResp(FightInfoResp other) : this() {
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightInfoResp Clone() {
      return new FightInfoResp(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Fight.FightData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.FightData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightInfoResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightInfoResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightInfoResp other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Fight.FightData();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              Data = new global::Fight.FightData();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FightListReq : pb::IMessage<FightListReq> {
    private static readonly pb::MessageParser<FightListReq> _parser = new pb::MessageParser<FightListReq>(() => new FightListReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightListReq(FightListReq other) : this() {
      userId_ = other.userId_;
      page_ = other.page_;
      pageSize_ = other.pageSize_;
      orderBy_ = other.orderBy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightListReq Clone() {
      return new FightListReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private uint pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "order_by" field.</summary>
    public const int OrderByFieldNumber = 4;
    private string orderBy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderBy {
      get { return orderBy_; }
      set {
        orderBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Page != other.Page) return false;
      if (PageSize != other.PageSize) return false;
      if (OrderBy != other.OrderBy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (OrderBy.Length != 0) hash ^= OrderBy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Page);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PageSize);
      }
      if (OrderBy.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OrderBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
      }
      if (OrderBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightListReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.OrderBy.Length != 0) {
        OrderBy = other.OrderBy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            Page = input.ReadUInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadUInt32();
            break;
          }
          case 34: {
            OrderBy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FightListResp : pb::IMessage<FightListResp> {
    private static readonly pb::MessageParser<FightListResp> _parser = new pb::MessageParser<FightListResp>(() => new FightListResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightListResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightListResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightListResp(FightListResp other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightListResp Clone() {
      return new FightListResp(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Fight.FightData> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Fight.FightData.Parser);
    private readonly pbc::RepeatedField<global::Fight.FightData> list_ = new pbc::RepeatedField<global::Fight.FightData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Fight.FightData> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightListResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightListResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightListResp other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObsAndBox : pb::IMessage<ObsAndBox> {
    private static readonly pb::MessageParser<ObsAndBox> _parser = new pb::MessageParser<ObsAndBox>(() => new ObsAndBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObsAndBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObsAndBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObsAndBox(ObsAndBox other) : this() {
      id_ = other.id_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObsAndBox Clone() {
      return new ObsAndBox(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Fight.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObsAndBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObsAndBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObsAndBox other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::Fight.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::Fight.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneInitPush : pb::IMessage<SceneInitPush> {
    private static readonly pb::MessageParser<SceneInitPush> _parser = new pb::MessageParser<SceneInitPush>(() => new SceneInitPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneInitPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneInitPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneInitPush(SceneInitPush other) : this() {
      obss_ = other.obss_.Clone();
      boxs_ = other.boxs_.Clone();
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneInitPush Clone() {
      return new SceneInitPush(this);
    }

    /// <summary>Field number for the "obss" field.</summary>
    public const int ObssFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Fight.ObsAndBox> _repeated_obss_codec
        = pb::FieldCodec.ForMessage(10, global::Fight.ObsAndBox.Parser);
    private readonly pbc::RepeatedField<global::Fight.ObsAndBox> obss_ = new pbc::RepeatedField<global::Fight.ObsAndBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Fight.ObsAndBox> Obss {
      get { return obss_; }
    }

    /// <summary>Field number for the "boxs" field.</summary>
    public const int BoxsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Fight.ObsAndBox> _repeated_boxs_codec
        = pb::FieldCodec.ForMessage(18, global::Fight.ObsAndBox.Parser);
    private readonly pbc::RepeatedField<global::Fight.ObsAndBox> boxs_ = new pbc::RepeatedField<global::Fight.ObsAndBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Fight.ObsAndBox> Boxs {
      get { return boxs_; }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Fight.UserInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(26, global::Fight.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::Fight.UserInfo> infos_ = new pbc::RepeatedField<global::Fight.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Fight.UserInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneInitPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneInitPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!obss_.Equals(other.obss_)) return false;
      if(!boxs_.Equals(other.boxs_)) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= obss_.GetHashCode();
      hash ^= boxs_.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      obss_.WriteTo(output, _repeated_obss_codec);
      boxs_.WriteTo(output, _repeated_boxs_codec);
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += obss_.CalculateSize(_repeated_obss_codec);
      size += boxs_.CalculateSize(_repeated_boxs_codec);
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneInitPush other) {
      if (other == null) {
        return;
      }
      obss_.Add(other.obss_);
      boxs_.Add(other.boxs_);
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            obss_.AddEntriesFrom(input, _repeated_obss_codec);
            break;
          }
          case 18: {
            boxs_.AddEntriesFrom(input, _repeated_boxs_codec);
            break;
          }
          case 26: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WinRateReq : pb::IMessage<WinRateReq> {
    private static readonly pb::MessageParser<WinRateReq> _parser = new pb::MessageParser<WinRateReq>(() => new WinRateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WinRateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WinRateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WinRateReq(WinRateReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WinRateReq Clone() {
      return new WinRateReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WinRateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WinRateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WinRateReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class WinRateResp : pb::IMessage<WinRateResp> {
    private static readonly pb::MessageParser<WinRateResp> _parser = new pb::MessageParser<WinRateResp>(() => new WinRateResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WinRateResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WinRateResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WinRateResp(WinRateResp other) : this() {
      police_ = other.police_;
      criminal_ = other.criminal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WinRateResp Clone() {
      return new WinRateResp(this);
    }

    /// <summary>Field number for the "police" field.</summary>
    public const int PoliceFieldNumber = 1;
    private long police_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Police {
      get { return police_; }
      set {
        police_ = value;
      }
    }

    /// <summary>Field number for the "criminal" field.</summary>
    public const int CriminalFieldNumber = 2;
    private long criminal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Criminal {
      get { return criminal_; }
      set {
        criminal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WinRateResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WinRateResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Police != other.Police) return false;
      if (Criminal != other.Criminal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Police != 0L) hash ^= Police.GetHashCode();
      if (Criminal != 0L) hash ^= Criminal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Police != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Police);
      }
      if (Criminal != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Criminal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Police != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Police);
      }
      if (Criminal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Criminal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WinRateResp other) {
      if (other == null) {
        return;
      }
      if (other.Police != 0L) {
        Police = other.Police;
      }
      if (other.Criminal != 0L) {
        Criminal = other.Criminal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Police = input.ReadInt64();
            break;
          }
          case 16: {
            Criminal = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KickOfflinePush : pb::IMessage<KickOfflinePush> {
    private static readonly pb::MessageParser<KickOfflinePush> _parser = new pb::MessageParser<KickOfflinePush>(() => new KickOfflinePush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickOfflinePush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickOfflinePush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickOfflinePush(KickOfflinePush other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickOfflinePush Clone() {
      return new KickOfflinePush(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickOfflinePush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickOfflinePush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickOfflinePush other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfoReq : pb::IMessage<UserInfoReq> {
    private static readonly pb::MessageParser<UserInfoReq> _parser = new pb::MessageParser<UserInfoReq>(() => new UserInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoReq(UserInfoReq other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoReq Clone() {
      return new UserInfoReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfoResp : pb::IMessage<UserInfoResp> {
    private static readonly pb::MessageParser<UserInfoResp> _parser = new pb::MessageParser<UserInfoResp>(() => new UserInfoResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fight.FightReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoResp(UserInfoResp other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoResp Clone() {
      return new UserInfoResp(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private global::Fight.UserInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fight.UserInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoResp other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Fight.UserInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            if (info_ == null) {
              Info = new global::Fight.UserInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
